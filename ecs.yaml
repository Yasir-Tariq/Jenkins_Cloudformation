AWSTemplateFormatVersion: 2010-09-09
Description: Creating ECS Cluster along with necessary resources to run the dockerized web application

Parameters:
  ecsAMI:
    Description: Enter the AMI for the ECS Instance.
    Type: String
    Default: ami-035ad8e6117e5fde5
  KeyName:
    Description: The key pair (.pem) which is used for the infrastructure.
    Type: AWS::EC2::KeyPair::KeyName
    Default: yasirKP-ohio
    ConstraintDescription: must be a valid and existing key pair name.
  ClusterName:
    Description: Please enter name for the ECS cluster.
    Type: String
  InstanceType:
    Description: Please enter the type for the instance.
    Type: String
    Default: t2.small
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ClusterName
  SecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: enable http,ssh and mysql
      VpcId: vpc-96a95ffd
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  # SecurityGroupNEW:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: enable http,ssh and mysql
  #     VpcId: vpc-96a95ffd
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: '80'
  #         ToPort: '80'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '22'
  #         ToPort: '22'
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: '3306'
  #         ToPort: '3306'
  #         CidrIp: 0.0.0.0/0
  AutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - subnet-209eca5a
        - subnet-f81a0490
        - subnet-00209c4c
      LaunchConfigurationName: !Ref ECSLaunchConfiguration
      MinSize: '0'
      MaxSize: '1'
      DesiredCapacity: '1'
      Tags:
        - Key: Name
          Value: MyECSInstance
          PropagateAtLaunch: true
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EC2Role


  EC2Role: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com,ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'ecs:CreateCluster'
              - 'ecs:DeregisterContainerInstance'
              - 'ecs:DiscoverPollEndpoint'
              - 'ecs:Poll'
              - 'ecs:RegisterContainerInstance'
              - 'ecs:StartTelemetrySession'
              - 'ecs:Submit*'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'ecr:GetAuthorizationToken'
              - 'ecr:BatchGetImage'
              - 'ecr:GetDownloadUrlForLayer'
            Resource: '*'
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - 'application-autoscaling:*'
              - 'cloudwatch:DescribeAlarms'
              - 'cloudwatch:PutMetricAlarm'
              - 'ecs:DescribeServices'
              - 'ecs:UpdateService'
            Resource: '*'
  
  ECSLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref ecsAMI
      SecurityGroups:
          - Ref: SecurityGroupWeb
      AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  
  